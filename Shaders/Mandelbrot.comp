#version 450

layout( push_constant ) uniform constants
{
	dvec2 start;
	dvec2 increment;
};

layout( set = 0, binding = 0, rgba8 ) uniform writeonly restrict image2D outTexture;

#define USE_PARALLEL 1

const uint maxN = 1024;

vec3 hsv2rgb(vec3 c)
{
    const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

vec4 makeColor( uint n )
{
    vec3 hsv = vec3( float(n) / float(maxN), 1., float( n < maxN ) );

    return vec4( hsv2rgb( hsv ), 1. );
}


#if USE_PARALLEL
const dvec4 minInf = dvec4( 16. );

uvec4 getLastToInfParalel( dvec4 cre, dvec4 cim )
{
    dvec4 re = dvec4( 0. );
    dvec4 im = dvec4( 0. );

    dvec4 resq = re*re;
    dvec4 imsq = im*im;

    uint N = 0;
    uvec4 n = uvec4( 0 );

    bvec4 act;

    do
    {
        im = 2*re*im + cim;
        re = resq - imsq + cre;
        
        resq = re*re;
        imsq = im*im;

        act = lessThan( resq + imsq, minInf );
        n = mix( n, n+1, act );
        N++;
    }
    while( any( act ) && N < maxN );

    return n;
}

const ivec2 offsets[4] = {
    { 0, 0 },
    { 0, 1 },
    { 1, 0 },
    { 1, 1 }
};

layout(local_size_x = 8, local_size_y = 8) in;
#else

const dvec2 oneNegOne= { 1, -1 };
const double minInf = 16.;

uint getLastToInf( dvec2 c )
{    
    dvec2 z = { 0, 0 };

    uint n = 0;
    do
    {
        z = dvec2( dot( z, oneNegOne * z ), 2*z.x*z.y) + c;

        n++;
    }
    while( dot(z, z) < minInf && n < maxN );

    return n;
}

layout(local_size_x = 16,local_size_y = 16) in;
#endif

void main()
{
    ivec2 screenPos = 
#if USE_PARALLEL 
        ivec2( gl_GlobalInvocationID.xy ) * 2;
#else
        ivec2( gl_GlobalInvocationID.xy );
#endif
    ivec2 texSize = imageSize( outTexture );

    if( all( lessThan( screenPos, texSize ) ) )
    {
        dvec2 basePos = start + screenPos * increment;
#if USE_PARALLEL
        dvec4 cre = basePos.xxxx;
        dvec4 cim = basePos.yyyy;
        cre.zw += increment.xx;
        cim.yw += increment.yy;

        uvec4 n = getLastToInfParalel( cre, cim );

        for( int i = 0; i < 4; i++ )
        {
            ivec2 pos = screenPos + offsets[i];
            if( all( lessThan( pos, texSize ) ) )
                imageStore( outTexture, pos, makeColor( n[i] ) );
        }  
#else
        imageStore( outTexture, screenPos, makeColor( getLastToInf( basePos ) ) );
#endif
    }    
}
